{-# OPTIONS --safe  --no-sized --prop #-}

open import Data.Empty
open import Data.Unit.Polymorphic renaming (‚ä§ to ùüô)
open import Data.Bool
open import Data.Nat
open import Data.Sum
open import Data.Product
open import Function
open import Relation.Binary.PropositionalEquality
open import Level renaming ( zero to lzero ; suc to lsuc)


module Desc {‚Ñì}  where

----------------------------------------------------------------------

data Desc  : Set (lsuc ‚Ñì) where
  End : Desc
  Rec : Desc ‚Üí Desc
  HRec : (A : Set ‚Ñì) ‚Üí (B : Desc ) ‚Üí Desc
  Arg : (A : Set ‚Ñì) ‚Üí (B : A ‚Üí Desc ) ‚Üí Desc

----------------------------------------------------------------------
import Ord
open import Ord {lsuc ‚Ñì} (Set ‚Ñì) (Lift _) -- using (Ord ; _‚â§‚Çí_ ; _<‚Çí_ ; ‚â§‚Çí-trans ; ‚â§‚Çí-refl; ‚Üë ; Z ; lim  )
open Ord.UpperBound (Set ‚Ñì) (Lift _) (Lift _ Bool) (Œª { (lift (lift l)) ‚Üí l}) (lift (lift true)) (lift (lift false)) refl refl
Size = Ord


El : Desc -> Set ‚Ñì ‚Üí Set ‚Ñì
El End X = ùüô
El (Rec B) X = Œ£[ x ‚àà X ] El B X
El (HRec A B) X = Œ£[ f ‚àà (A ‚Üí X) ] (El B X)
El (Arg A B) X = Œ£[ a ‚àà A ] El (B a) X

data Œº (D : Desc ) : Set ‚Ñì where
    init : El D (Œº D) -> Œº D

size : ‚àÄ {D : Desc} -> Œº D -> Size
size {D = D} (init x) = ‚Üë (sizeHelper D D x)
  where
    sizeHelper : ‚àÄ D E ‚Üí El D (Œº E) ‚Üí Size
    sizeHelper End E x = Z
    sizeHelper (Rec D) E (x , y) = size {D = E} x ‚äîlim sizeHelper _ E y -- size x ‚äîlim {!!}
    sizeHelper (HRec A D) E (f , x) = (lim A Œª (lift a) ‚Üí size {D = E} (f a)) ‚äîlim (sizeHelper _ E x)
    sizeHelper (Arg A B) E (a , x) = sizeHelper _ E x
-- sizeHelper {D = .(End _)} ElEnd = Z
-- sizeHelper {D = .(Rec _)} (ElRec x x‚ÇÅ) = ((size x) ‚äîlim  (sizeHelper x‚ÇÅ))
-- sizeHelper {D = (Ref A _)} (ElRef f x) = ((lim A (Œª (lift a) -> size (f a))) ‚äîlim (sizeHelper x))
-- sizeHelper {D = .(Arg _ _)} (ElArg a x) = sizeHelper x

-- _<D_ : ‚àÄ {D} ‚Üí Œº D ‚Üí Œº D ‚Üí Set (lsuc ‚Ñì)
-- x <D y = size x <‚Çí size y

-- open import Induction.WellFounded


-- genRec : ‚àÄ {‚Ñì'} {D : Desc} ‚Üí (P : Œº D ‚Üí Set ‚Ñì') ‚Üí (‚àÄ x ‚Üí (‚àÄ y ‚Üí y <D x ‚Üí P y) ‚Üí P x) ‚Üí ‚àÄ x ‚Üí P x
-- genRec P rec x = helper (x , refl)
--   where
--     recHelper : _
--     recHelper sz rec' (x , refl) = rec x Œª y lt ‚Üí rec' (size y) lt (y , refl)
--     helper = All.wfRec ordWf _ (Œª sz ‚Üí ((x , _) : ‚àÉ[ x ](size x ‚â° sz)) ‚Üí P x) recHelper (size x)
