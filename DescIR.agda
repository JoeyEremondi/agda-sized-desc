{-# OPTIONS --safe --without-K --no-sized  #-}

open import Data.Empty
open import Data.Unit.Polymorphic renaming (‚ä§ to ùüô)
open import Data.Bool
open import Data.Nat
open import Data.Sum
open import Data.Product
open import Function
open import Relation.Binary.PropositionalEquality
open import Level renaming ( zero to lzero ; suc to lsuc)


module DescIR {‚Ñì}  where

--Based off of http://spire-lang.org/blog/2014/08/04/inductive-recursive-descriptions/

----------------------------------------------------------------------
-- Generic description of an inductive recursive type
-- 
data Desc  : Set (lsuc ‚Ñì) where
  End : (o : Set ‚Ñì) ‚Üí Desc
  Rec : (B : Set ‚Ñì ‚Üí Desc ) ‚Üí Desc
  Ref : (A : Set ‚Ñì)  (B : (o : (a : A) ‚Üí Set ‚Ñì ) ‚Üí Desc ) ‚Üí Desc
  Arg : (A : Set ‚Ñì) (B : A ‚Üí Desc ) ‚Üí Desc

----------------------------------------------------------------------
import Ord
open import Ord {lsuc ‚Ñì} (Set ‚Ñì) (Lift _) -- using (Ord ; _‚â§‚Çí_ ; _<‚Çí_ ; ‚â§‚Çí-trans ; ‚â§‚Çí-refl; ‚Üë ; Z ; lim  )
open Ord.UpperBound (Set ‚Ñì) (Lift _) (Lift _ Bool) (Œª { (lift (lift l)) ‚Üí l}) (lift (lift true)) (lift (lift false)) refl refl

data El (X : Set (lsuc ‚Ñì)) (Y : X -> Set ‚Ñì) : Desc -> Set (lsuc ‚Ñì) where
      ElEnd : ‚àÄ {o } -> El X Y (End o)
      ElRec : ‚àÄ {B } -> (x : X ) ->  El X Y (B (Y x))   -> El X Y (Rec B)
      ElRef : ‚àÄ {A B }  ->  (f : (a : A) ->  X ) -> El X Y (B (Œª a ‚Üí Y (f a)))  -> El X Y (Ref A B )
      ElArg : ‚àÄ {A B } -> (a : A) -> El X Y (B a)  -> El X Y (Arg A B)

data SimpleSig (X : Set ‚Ñì) (Y :  Set ‚Ñì) : Set ‚Ñì where
  SigPair : (x : X) -> Y -> SimpleSig X Y


data Œº (D : Desc ) : Set (lsuc ‚Ñì)
foldO : (D : Desc ) ‚Üí Œº D  ‚Üí Set ‚Ñì
foldsO : ‚àÄ  (D E : Desc ) ‚Üí El (Œº E) (foldO E) D  ‚Üí Set ‚Ñì

data Œº D where
    init : El (Œº D) (foldO D) D -> Œº D

foldO D (init xs ) = foldsO D D xs

foldsO (End o) E (ElEnd) = o
foldsO (Rec B) E (ElRec x  xs) = foldsO (B (foldO E x )) E xs
foldsO (Ref A B ) E (ElRef f xs) = foldsO (B ( Œª a -> foldO E (f a))) E xs
foldsO (Arg A B) E (ElArg a  xs) = foldsO (B a) E xs



size : ‚àÄ {D : Desc} -> Œº D -> Ord
size (init x) = ‚Üë (sizeHelper x)
  where
    sizeHelper : ‚àÄ {D E : Desc} ->  El (Œº E) (foldO E) D -> Ord
    sizeHelper {D = .(End _)} ElEnd = Z
    sizeHelper {D = .(Rec _)} (ElRec x x‚ÇÅ) = ((size x) ‚äîlim  (sizeHelper x‚ÇÅ))
    sizeHelper {D = (Ref A _)} (ElRef f x) = ((lim A (Œª (lift a) -> size (f a))) ‚äîlim (sizeHelper x))
    sizeHelper {D = .(Arg _ _)} (ElArg a x) = sizeHelper x

_<D_ : ‚àÄ {D} ‚Üí Œº D ‚Üí Œº D ‚Üí Set (lsuc ‚Ñì)
x <D y = size x <‚Çí size y

open import Induction.WellFounded


genRec : ‚àÄ {‚Ñì'} {D : Desc} ‚Üí (P : Œº D ‚Üí Set ‚Ñì') ‚Üí (‚àÄ x ‚Üí (‚àÄ y ‚Üí y <D x ‚Üí P y) ‚Üí P x) ‚Üí ‚àÄ x ‚Üí P x
genRec P rec x = helper (x , refl)
  where
    recHelper : _
    recHelper sz rec' (x , refl) = rec x Œª y lt ‚Üí rec' (size y) lt (y , refl)
    helper = All.wfRec ordWf _ (Œª sz ‚Üí ((x , _) : ‚àÉ[ x ](size x ‚â° sz)) ‚Üí P x) recHelper (size x)
